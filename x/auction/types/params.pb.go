// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/auction/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// defines how long (either in blocktime or blockheight)
	// between each auction
	AuctionPeriods time.Duration `protobuf:"bytes,1,opt,name=auction_periods,json=auctionPeriods,proto3,stdduration" json:"auction_periods"`
	// defines how long the auction will takes
	AuctionDurations time.Duration `protobuf:"bytes,2,opt,name=auction_durations,json=auctionDurations,proto3,stdduration" json:"auction_durations"`
	// duration between each price reduction
	ReduceStep time.Duration `protobuf:"bytes,3,opt,name=reduce_step,json=reduceStep,proto3,stdduration" json:"reduce_step"`
	// rate compared with the collaterals price from the
	// oracle at which the auction will start with
	StartingRate string `protobuf:"bytes,4,opt,name=starting_rate,json=startingRate,proto3" json:"starting_rate,omitempty"`
	// rate compared with the initial price that the price
	// can drop to
	LowestRate string `protobuf:"bytes,5,opt,name=lowest_rate,json=lowestRate,proto3" json:"lowest_rate,omitempty"`
	// rate that are decrease every reduce_step
	DiscountRate string `protobuf:"bytes,6,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e77e58d36f40199, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAuctionPeriods() time.Duration {
	if m != nil {
		return m.AuctionPeriods
	}
	return 0
}

func (m *Params) GetAuctionDurations() time.Duration {
	if m != nil {
		return m.AuctionDurations
	}
	return 0
}

func (m *Params) GetReduceStep() time.Duration {
	if m != nil {
		return m.ReduceStep
	}
	return 0
}

func (m *Params) GetStartingRate() string {
	if m != nil {
		return m.StartingRate
	}
	return ""
}

func (m *Params) GetLowestRate() string {
	if m != nil {
		return m.LowestRate
	}
	return ""
}

func (m *Params) GetDiscountRate() string {
	if m != nil {
		return m.DiscountRate
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "reserve.auction.v1.Params")
}

func init() { proto.RegisterFile("reserve/auction/v1/params.proto", fileDescriptor_7e77e58d36f40199) }

var fileDescriptor_7e77e58d36f40199 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6f, 0xda, 0x40,
	0x14, 0xc7, 0x7d, 0xa5, 0x45, 0xea, 0x51, 0x68, 0xb1, 0x3a, 0x18, 0x06, 0x9b, 0x76, 0x42, 0x48,
	0xf5, 0x95, 0xb2, 0x75, 0x44, 0x2c, 0xed, 0x44, 0xa9, 0xba, 0x74, 0xb1, 0x0e, 0xfb, 0xea, 0x5a,
	0xc2, 0x7e, 0xd6, 0xdd, 0x99, 0x96, 0xaf, 0x90, 0x29, 0x63, 0xc6, 0x8c, 0x19, 0x19, 0xb2, 0xe5,
	0x0b, 0x30, 0xa2, 0x4c, 0x99, 0x92, 0x08, 0x06, 0xf2, 0x31, 0x22, 0xee, 0xce, 0x59, 0xc2, 0xc2,
	0x62, 0xdd, 0xbd, 0xf7, 0xff, 0xff, 0xfe, 0xd6, 0xbb, 0x87, 0x3d, 0xce, 0x04, 0xe3, 0x73, 0x46,
	0x68, 0x11, 0xca, 0x04, 0x32, 0x32, 0xef, 0x93, 0x9c, 0x72, 0x9a, 0x0a, 0x3f, 0xe7, 0x20, 0xc1,
	0xb6, 0x8d, 0xc0, 0x37, 0x02, 0x7f, 0xde, 0x6f, 0x37, 0x69, 0x9a, 0x64, 0x40, 0xd4, 0x57, 0xcb,
	0xda, 0xef, 0x63, 0x88, 0x41, 0x1d, 0xc9, 0xfe, 0x64, 0xaa, 0xad, 0x10, 0x44, 0x0a, 0x22, 0xd0,
	0x0d, 0x7d, 0x31, 0x2d, 0x37, 0x06, 0x88, 0x67, 0x8c, 0xa8, 0xdb, 0xb4, 0xf8, 0x43, 0xa2, 0x82,
	0x53, 0x15, 0xa0, 0x2a, 0x1f, 0xaf, 0x2a, 0xb8, 0x3a, 0x56, 0x3f, 0x62, 0xff, 0xc0, 0x6f, 0x4d,
	0x78, 0x90, 0x33, 0x9e, 0x40, 0x24, 0x1c, 0xd4, 0x41, 0xdd, 0xda, 0x97, 0x96, 0xaf, 0x21, 0x7e,
	0x09, 0xf1, 0x47, 0x06, 0x32, 0xac, 0xaf, 0x6e, 0x3d, 0xeb, 0xec, 0xce, 0x43, 0x17, 0xbb, 0x65,
	0x0f, 0x4d, 0x1a, 0x06, 0x30, 0xd6, 0x7e, 0xfb, 0x17, 0x6e, 0x96, 0xc8, 0x32, 0x57, 0x38, 0x2f,
	0x8e, 0x84, 0xbe, 0x33, 0x88, 0xb2, 0x2f, 0xec, 0x6f, 0xb8, 0xc6, 0x59, 0x54, 0x84, 0x2c, 0x10,
	0x92, 0xe5, 0x4e, 0xe5, 0x48, 0x20, 0xd6, 0xe6, 0x9f, 0x92, 0xe5, 0xf6, 0x00, 0xd7, 0x85, 0xa4,
	0x5c, 0x26, 0x59, 0x1c, 0x70, 0x2a, 0x99, 0xf3, 0xb2, 0x83, 0xba, 0xaf, 0x87, 0x8d, 0xeb, 0xcb,
	0x4f, 0xd8, 0x0c, 0x72, 0xc4, 0xc2, 0xc9, 0x9b, 0x52, 0x34, 0xa1, 0x92, 0xd9, 0x04, 0xd7, 0x66,
	0xf0, 0x8f, 0x09, 0xa9, 0x2d, 0xaf, 0x0e, 0x5a, 0xb0, 0x96, 0x28, 0xc3, 0x00, 0xd7, 0xa3, 0x44,
	0x84, 0x50, 0x64, 0xc6, 0x52, 0x3d, 0x9c, 0x52, 0x8a, 0xf6, 0xa6, 0xaf, 0x1f, 0x1e, 0xce, 0x3d,
	0x74, 0xb2, 0x5b, 0xf6, 0x9c, 0x72, 0x79, 0xfe, 0x3f, 0xad, 0x8f, 0x7e, 0xb2, 0xe1, 0xf7, 0xd5,
	0xc6, 0x45, 0xeb, 0x8d, 0x8b, 0xee, 0x37, 0x2e, 0x3a, 0xdd, 0xba, 0xd6, 0x7a, 0xeb, 0x5a, 0x37,
	0x5b, 0xd7, 0xfa, 0xfd, 0x39, 0x4e, 0xe4, 0xdf, 0x62, 0xea, 0x87, 0x90, 0x12, 0xc8, 0x20, 0x5d,
	0xa8, 0xa9, 0x84, 0x30, 0x23, 0xcf, 0x61, 0x72, 0x91, 0x33, 0x31, 0xad, 0x2a, 0xc5, 0xe0, 0x31,
	0x00, 0x00, 0xff, 0xff, 0x68, 0x16, 0xbb, 0xfb, 0xab, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuctionPeriods != that1.AuctionPeriods {
		return false
	}
	if this.AuctionDurations != that1.AuctionDurations {
		return false
	}
	if this.ReduceStep != that1.ReduceStep {
		return false
	}
	if this.StartingRate != that1.StartingRate {
		return false
	}
	if this.LowestRate != that1.LowestRate {
		return false
	}
	if this.DiscountRate != that1.DiscountRate {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DiscountRate) > 0 {
		i -= len(m.DiscountRate)
		copy(dAtA[i:], m.DiscountRate)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DiscountRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LowestRate) > 0 {
		i -= len(m.LowestRate)
		copy(dAtA[i:], m.LowestRate)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LowestRate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartingRate) > 0 {
		i -= len(m.StartingRate)
		copy(dAtA[i:], m.StartingRate)
		i = encodeVarintParams(dAtA, i, uint64(len(m.StartingRate)))
		i--
		dAtA[i] = 0x22
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ReduceStep, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ReduceStep):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.AuctionDurations, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.AuctionDurations):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.AuctionPeriods, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.AuctionPeriods):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.AuctionPeriods)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.AuctionDurations)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ReduceStep)
	n += 1 + l + sovParams(uint64(l))
	l = len(m.StartingRate)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.LowestRate)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.DiscountRate)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.AuctionPeriods, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.AuctionDurations, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceStep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ReduceStep, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
