syntax = "proto3";
package reserve.auction.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/onomyprotocol/reserve/x/auction/types";

// AuctionStatus enumerates the valid auction status.
enum AuctionStatus {
    // AUCTION_STATUS_UNSPECIFIED defines unknow auction status default is active.
    AUCTION_STATUS_UNSPECIFIED= 0;
     // AUCTION_STATUS_ACTIVE defines auction active status.
     AUCTION_STATUS_ACTIVE= 1;
    // AUCTION_STATUS_FINISHED defines auction finished with a winning bid.
    AUCTION_STATUS_FINISHED = 2;
     // AUCTION_STATUS_EXPIRED defines auction finished without a winning bid.
     AUCTION_STATUS_EXPIRED = 3;
  }

// Auction struct
message Auction {
  // start_time defines auction's start time
  google.protobuf.Timestamp start_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // end_time defines where the auction ended when there are no winning bid
  google.protobuf.Timestamp end_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // for simplicity, will use vault id that start the auction as auction id
  uint64 auction_id = 3;

  // starting price (currently only support usd stable token)
  cosmos.base.v1beta1.Coin initial_price = 4
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // items defines liquidate assets
  cosmos.base.v1beta1.Coin item = 5
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // current_rate defines the rate compare with the initial price
  string current_rate = 6 [ (cosmos_proto.scalar) = "cosmos.Dec" ];

  // last_discount_time defines the last time a discount has been apply
  google.protobuf.Timestamp last_discount_time = 7 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // status defines auction current status
  AuctionStatus status = 8;

  // final_bid contain the winning bid or empty if auction ended without a winner
  Bid final_bid = 9; 

  // target_goal defines the debt the auction is trying to recover
  cosmos.base.v1beta1.Coin target_goal = 10;
}

// Bid defines bid entry
message Bid {
  // id of bid
  string bid_id = 1;
  
  // bidder address
  string bidder = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // bidding amount
  cosmos.base.v1beta1.Coin amount = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  
  // recive_rate defines the rate compare to the price at the start of the auction
  // that the bid is willing to pay
  string recive_rate = 4 [ (cosmos_proto.scalar) = "cosmos.Dec" ];
}

// BidQueue defines a list of bid entries for a single auction
message BidQueue {
  // bidder address
  uint64 auction_id = 1;

  // map of bid entries with bidder address
  map<string, Bid> bids = 2;
}