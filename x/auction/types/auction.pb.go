// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/auction/v1/auction.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus enumerates the valid auction status.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines unknow auction status default is active.
	AuctionStatus_AUCTION_STATUS_UNSPECIFIED AuctionStatus = 0
	// AUCTION_STATUS_ACTIVE defines auction active status.
	AuctionStatus_AUCTION_STATUS_ACTIVE AuctionStatus = 1
	// AUCTION_STATUS_FINISHED defines auction finished with a winning bid.
	AuctionStatus_AUCTION_STATUS_FINISHED AuctionStatus = 2
	// AUCTION_STATUS_EXPIRED defines auction finished without a winning bid.
	AuctionStatus_AUCTION_STATUS_EXPIRED AuctionStatus = 3
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_ACTIVE",
	2: "AUCTION_STATUS_FINISHED",
	3: "AUCTION_STATUS_EXPIRED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_ACTIVE":      1,
	"AUCTION_STATUS_FINISHED":    2,
	"AUCTION_STATUS_EXPIRED":     3,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{0}
}

// Auction struct
type Auction struct {
	// start_time defines auction's start time
	StartTime time.Time `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_time defines where the auction ended when there are no winning bid
	EndTime time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// for simplicity, will use vault id that start the auction as auction id
	AuctionId uint64 `protobuf:"varint,3,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// starting price (currently only support usd stable token)
	InitialPrice types.Coin `protobuf:"bytes,4,opt,name=initial_price,json=initialPrice,proto3" json:"initial_price"`
	// items defines liquidate assets
	Items []types.Coin `protobuf:"bytes,5,rep,name=items,proto3" json:"items"`
	// current_rate defines the rate compare with the initial price
	CurrentRate string `protobuf:"bytes,6,opt,name=current_rate,json=currentRate,proto3" json:"current_rate,omitempty"`
	// last_discount_time defines the last time a discount has been apply
	LastDiscountTime time.Time `protobuf:"bytes,7,opt,name=last_discount_time,json=lastDiscountTime,proto3,stdtime" json:"last_discount_time"`
	// status defines auction current status
	Status AuctionStatus `protobuf:"varint,8,opt,name=status,proto3,enum=reserve.auction.v1.AuctionStatus" json:"status,omitempty"`
	// final_bid contain the winning bid or empty if auction ended without a winner
	FinalBid *Bid `protobuf:"bytes,9,opt,name=final_bid,json=finalBid,proto3" json:"final_bid,omitempty"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{0}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Auction) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Auction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Auction) GetInitialPrice() types.Coin {
	if m != nil {
		return m.InitialPrice
	}
	return types.Coin{}
}

func (m *Auction) GetItems() []types.Coin {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Auction) GetCurrentRate() string {
	if m != nil {
		return m.CurrentRate
	}
	return ""
}

func (m *Auction) GetLastDiscountTime() time.Time {
	if m != nil {
		return m.LastDiscountTime
	}
	return time.Time{}
}

func (m *Auction) GetStatus() AuctionStatus {
	if m != nil {
		return m.Status
	}
	return AuctionStatus_AUCTION_STATUS_UNSPECIFIED
}

func (m *Auction) GetFinalBid() *Bid {
	if m != nil {
		return m.FinalBid
	}
	return nil
}

// Bid defines bid entry
type Bid struct {
	// bidder address
	Bidder string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// bidding amount
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{1}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// BidQueue defines a list of bid entries for a single auction
type BidQueue struct {
	// bidder address
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// map of bid entries with bidder address
	Bids map[string]*Bid `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BidQueue) Reset()         { *m = BidQueue{} }
func (m *BidQueue) String() string { return proto.CompactTextString(m) }
func (*BidQueue) ProtoMessage()    {}
func (*BidQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_8758264ed04201a2, []int{2}
}
func (m *BidQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidQueue.Merge(m, src)
}
func (m *BidQueue) XXX_Size() int {
	return m.Size()
}
func (m *BidQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_BidQueue.DiscardUnknown(m)
}

var xxx_messageInfo_BidQueue proto.InternalMessageInfo

func (m *BidQueue) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *BidQueue) GetBids() map[string]*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func init() {
	proto.RegisterEnum("reserve.auction.v1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*Auction)(nil), "reserve.auction.v1.Auction")
	proto.RegisterType((*Bid)(nil), "reserve.auction.v1.Bid")
	proto.RegisterType((*BidQueue)(nil), "reserve.auction.v1.BidQueue")
	proto.RegisterMapType((map[string]*Bid)(nil), "reserve.auction.v1.BidQueue.BidsEntry")
}

func init() { proto.RegisterFile("reserve/auction/v1/auction.proto", fileDescriptor_8758264ed04201a2) }

var fileDescriptor_8758264ed04201a2 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0x8e, 0x93, 0x34, 0x8d, 0xaf, 0x1f, 0x0a, 0xa7, 0x42, 0xdd, 0x20, 0xdc, 0xd0, 0x01, 0x45,
	0x95, 0x6a, 0x37, 0x85, 0x01, 0x2a, 0x96, 0x38, 0x49, 0x55, 0x33, 0x94, 0xe0, 0xa4, 0x80, 0x58,
	0x2c, 0xdb, 0x77, 0x0d, 0x27, 0x62, 0x5f, 0xe4, 0x3b, 0x47, 0x64, 0xe6, 0x0f, 0xf4, 0x67, 0x30,
	0x32, 0x54, 0x62, 0xe1, 0x07, 0x74, 0xac, 0x3a, 0x31, 0x01, 0x6a, 0x07, 0xfe, 0x06, 0xf2, 0xf9,
	0x52, 0x89, 0x40, 0xa5, 0x76, 0xb1, 0x5e, 0xdf, 0xfb, 0x3c, 0xcf, 0xfb, 0x71, 0x8f, 0x0e, 0xd4,
	0x62, 0xcc, 0x70, 0x3c, 0xc6, 0xa6, 0x97, 0x04, 0x9c, 0xd0, 0xc8, 0x1c, 0x37, 0xa6, 0xa1, 0x31,
	0x8a, 0x29, 0xa7, 0x10, 0x4a, 0x84, 0x31, 0x3d, 0x1e, 0x37, 0xaa, 0x77, 0xbc, 0x90, 0x44, 0xd4,
	0x14, 0xdf, 0x0c, 0x56, 0x5d, 0x19, 0xd0, 0x01, 0x15, 0xa1, 0x99, 0x46, 0xf2, 0x74, 0x2d, 0xa0,
	0x2c, 0xa4, 0xcc, 0xcd, 0x12, 0xd9, 0x8f, 0x4c, 0xad, 0x0f, 0x28, 0x1d, 0x0c, 0xb1, 0x29, 0xfe,
	0xfc, 0xe4, 0xc8, 0xe4, 0x24, 0xc4, 0x8c, 0x7b, 0xe1, 0x48, 0x02, 0xf4, 0x0c, 0x6e, 0xfa, 0x1e,
	0xc3, 0xe6, 0xb8, 0xe1, 0x63, 0xee, 0x35, 0xcc, 0x80, 0x12, 0xd9, 0xd8, 0xc6, 0xb7, 0x22, 0x98,
	0x6f, 0x66, 0x3d, 0xc1, 0x7d, 0x00, 0x18, 0xf7, 0x62, 0xee, 0xa6, 0x22, 0x9a, 0x52, 0x53, 0xea,
	0x0b, 0x3b, 0x55, 0x23, 0xab, 0x60, 0x4c, 0x2b, 0x18, 0xfd, 0x69, 0x05, 0x6b, 0xe9, 0xf4, 0xc7,
	0x7a, 0xee, 0xf8, 0xe7, 0xba, 0xf2, 0xf9, 0xf7, 0x97, 0x4d, 0xc5, 0x51, 0x05, 0x39, 0x4d, 0xc3,
	0x36, 0x28, 0xe3, 0x08, 0x65, 0x3a, 0xf9, 0xdb, 0xea, 0xcc, 0xe3, 0x08, 0x09, 0x95, 0x07, 0x00,
	0xc8, 0x75, 0xb9, 0x04, 0x69, 0x85, 0x9a, 0x52, 0x2f, 0x3a, 0xaa, 0x3c, 0xb1, 0x11, 0xb4, 0xc1,
	0x12, 0x89, 0x08, 0x27, 0xde, 0xd0, 0x1d, 0xc5, 0x24, 0xc0, 0x5a, 0x51, 0x54, 0x5a, 0x33, 0xe4,
	0x86, 0xd2, 0x91, 0x0d, 0x39, 0xb2, 0xd1, 0xa2, 0x24, 0xb2, 0xd4, 0xb4, 0x50, 0x56, 0x64, 0x51,
	0x52, 0xbb, 0x29, 0x13, 0xee, 0x82, 0x39, 0xc2, 0x71, 0xc8, 0xb4, 0xb9, 0x5a, 0xe1, 0xc6, 0x12,
	0x19, 0x05, 0x36, 0xc0, 0x62, 0x90, 0xc4, 0x31, 0x8e, 0xb8, 0x1b, 0x7b, 0x1c, 0x6b, 0xa5, 0x9a,
	0x52, 0x57, 0xad, 0xe5, 0xf3, 0x93, 0x2d, 0x20, 0x55, 0xda, 0x38, 0x70, 0x16, 0x24, 0xc6, 0xf1,
	0x38, 0x86, 0x6f, 0x00, 0x1c, 0x7a, 0x8c, 0xbb, 0x88, 0xb0, 0x80, 0x26, 0x91, 0x5c, 0xf8, 0xfc,
	0x6d, 0x17, 0x55, 0x49, 0x45, 0xda, 0x52, 0x43, 0x6c, 0xec, 0x19, 0x28, 0x31, 0xee, 0xf1, 0x84,
	0x69, 0xe5, 0x9a, 0x52, 0x5f, 0xde, 0x79, 0x68, 0xfc, 0xeb, 0x3b, 0x43, 0x5e, 0x77, 0x4f, 0x00,
	0x1d, 0x49, 0x80, 0x4f, 0x80, 0x7a, 0x44, 0x22, 0x6f, 0xe8, 0xfa, 0x04, 0x69, 0xaa, 0x68, 0x65,
	0xf5, 0x7f, 0x6c, 0x8b, 0x20, 0xa7, 0x2c, 0x90, 0x16, 0x41, 0x1b, 0x09, 0x28, 0x58, 0x04, 0xc1,
	0x6d, 0x50, 0xf2, 0x09, 0x42, 0x38, 0x16, 0xae, 0x51, 0x2d, 0xed, 0xfc, 0x64, 0x6b, 0x45, 0x4e,
	0xdf, 0x44, 0x28, 0xc6, 0x8c, 0xf5, 0x78, 0x4c, 0xa2, 0x81, 0x23, 0x71, 0xf0, 0x39, 0x28, 0x79,
	0x61, 0xda, 0xb7, 0xf4, 0xc7, 0xcd, 0x56, 0x2e, 0x39, 0x1b, 0x5f, 0x15, 0x50, 0xb6, 0x08, 0x7a,
	0x95, 0xe0, 0x64, 0xd6, 0x26, 0xca, 0xac, 0x4d, 0x76, 0x41, 0xd1, 0x27, 0x88, 0x69, 0x79, 0x71,
	0xb5, 0x8f, 0xae, 0x99, 0x49, 0x48, 0xa5, 0x01, 0xeb, 0x44, 0x3c, 0x9e, 0x38, 0x82, 0x53, 0xed,
	0x02, 0xf5, 0xea, 0x08, 0x56, 0x40, 0xe1, 0x03, 0x9e, 0x64, 0x13, 0x3a, 0x69, 0x08, 0xb7, 0xc0,
	0xdc, 0xd8, 0x1b, 0x26, 0x53, 0x8f, 0x5f, 0xbb, 0xaf, 0x0c, 0xb5, 0x9b, 0x7f, 0xaa, 0x6c, 0x7e,
	0x52, 0xc0, 0xd2, 0x5f, 0x17, 0x00, 0x75, 0x50, 0x6d, 0x1e, 0xb6, 0xfa, 0xf6, 0xcb, 0x03, 0xb7,
	0xd7, 0x6f, 0xf6, 0x0f, 0x7b, 0xee, 0xe1, 0x41, 0xaf, 0xdb, 0x69, 0xd9, 0x7b, 0x76, 0xa7, 0x5d,
	0xc9, 0xc1, 0x35, 0x70, 0x77, 0x26, 0xdf, 0x6c, 0xf5, 0xed, 0xd7, 0x9d, 0x8a, 0x02, 0xef, 0x83,
	0xd5, 0x99, 0xd4, 0x9e, 0x7d, 0x60, 0xf7, 0xf6, 0x3b, 0xed, 0x4a, 0x1e, 0x56, 0xc1, 0xbd, 0x99,
	0x64, 0xe7, 0x6d, 0xd7, 0x76, 0x3a, 0xed, 0x4a, 0xc1, 0x7a, 0x71, 0x7a, 0xa1, 0x2b, 0x67, 0x17,
	0xba, 0xf2, 0xeb, 0x42, 0x57, 0x8e, 0x2f, 0xf5, 0xdc, 0xd9, 0xa5, 0x9e, 0xfb, 0x7e, 0xa9, 0xe7,
	0xde, 0x6d, 0x0f, 0x08, 0x7f, 0x9f, 0xf8, 0x46, 0x40, 0x43, 0x93, 0x46, 0x34, 0x9c, 0x08, 0x1b,
	0x06, 0x74, 0x68, 0x4e, 0xdf, 0xb8, 0x8f, 0x57, 0xaf, 0x1c, 0x9f, 0x8c, 0x30, 0xf3, 0x4b, 0x02,
	0xf1, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x90, 0x33, 0x5a, 0x05, 0x05, 0x00, 0x00,
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalBid != nil {
		{
			size, err := m.FinalBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastDiscountTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastDiscountTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAuction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if len(m.CurrentRate) > 0 {
		i -= len(m.CurrentRate)
		copy(dAtA[i:], m.CurrentRate)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.CurrentRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.InitialPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x18
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintAuction(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintAuction(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BidQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for k := range m.Bids {
			v := m.Bids[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAuction(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.InitialPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	l = len(m.CurrentRate)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastDiscountTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.Status != 0 {
		n += 1 + sovAuction(uint64(m.Status))
	}
	if m.FinalBid != nil {
		l = m.FinalBid.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *BidQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	if len(m.Bids) > 0 {
		for k, v := range m.Bids {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAuction(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAuction(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuction(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, types.Coin{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDiscountTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastDiscountTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalBid == nil {
				m.FinalBid = &Bid{}
			}
			if err := m.FinalBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bids == nil {
				m.Bids = make(map[string]*Bid)
			}
			var mapkey string
			var mapvalue *Bid
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bid{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Bids[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
